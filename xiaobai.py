from aiocqhttp import CQHttp, Event, Message, MessageSegment
import config
import CQparse
from db import DB
import asyncio
import importlib
import json
import traceback
import re
from random import randrange 
import time
import httpx

import setu
import interact
import repeat
import antirecall
import blb
import bili

db = DB()

async def yeshou(event, bot):
    if re.search(r'(野兽)|(114514)|臭', event.message):
        if (randrange(100) < 5):
            await bot.send(event, '[CQ:record,file=base64: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]')
            return True
    return False

bot = CQHttp(access_token=config.access_token)
accounts = {}
groups = {}
ginfo = {}
call = []

def pushcall (time):
    call.append(time)
    if len(call) > 30:
        call.pop(0)

async def followblb():
    while True:
        await asyncio.sleep(30)
        await blb.checkBooks(bot, db, groups)

async def followbili():
    while True:
        await asyncio.sleep(10)
        await bili.checkUps(bot, db, CQparse, groups)

async def updateBlb():
    while True:
        l = await db.blbBookList()
        add = {}
        for gro in ginfo.keys():
            gr = ginfo.get(gro)
            g = gr[0]
            if g[12]:
                gl = json.loads(g[12])
                for gg in gl:
                    q = False
                    for ll in l:
                        if gg == ll[0]:
                            q = True
                    if not q:
                        add.update({gg:True})
        for v in add.keys():
            r = await blb.getNovel(v)
            if r.get('success'):
                await db.blbAdd(v,r.get('title'),r.get('chapter'))
        await asyncio.sleep(60)

async def updateBili():
    while True:
        l = await db.biliList()
        add = {}
        for gro in ginfo.keys():
            gr = ginfo.get(gro)
            g = gr[0]
            if g[13]:
                gl = json.loads(g[13])
                for gg in gl:
                    q = False
                    for ll in l:
                        if gg == ll[0]:
                            q = True
                    if not q:
                        add.update({gg:True})
        for v in add.keys():
            r = await bili.getUp(v)
            if r.get('success'):
                await db.biliAdd(v,r.get('name'),r.get('did'),0)
        await asyncio.sleep(60)


@bot.on_meta_event('heartbeat')
async def _meta(event:Event):
    try:
        w = await bot.get_group_list(self_id=event.self_id)
        for group in w:
            groups.update({group['group_id']: event.self_id})
        accounts.update({event.self_id: time.time()})
    except:
        pass

@bot.on_startup
async def _st():
    loop = asyncio.get_event_loop()
    await db.createPool(loop)
    gl = await db.groupList()
    t = time.time()
    for g in gl:
        ginfo.update({g[0]:[g,t]})
    loop.create_task(followblb())
    loop.create_task(followbili())
    loop.create_task(updateBili())
    loop.create_task(updateBlb())
    pass

@bot.on_message('private')
async def _private(event:Event):
    if event.user_id != config.superuser:
        return
    cmdReg = r'^-(?P<command>[a-zA-Z0-9]+)=(?P<text>.*)$'
    cmd = re.match(cmdReg, event.message)
    if cmd.group('command') == 'broadcast':
        for a in accounts.keys():
            if time.time() - accounts[a] < 10000:
                w = await bot.get_group_list(self_id=a)
                for group in w:
                    try:
                        g = await db.getGroup(group['group_id'])
                        if(g[8]) == 1:
                            continue
                        await bot.send_msg(self_id=a, group_id=group['group_id'], message_type='group', message=cmd.group('text'))
                    except Exception:
                        print(time.strftime('[%Y-%m-%d %H:%M:%S]',time.localtime()) + '[ERROR]' + traceback.format_exc())
                        continue

@bot.on_message('group.normal')
async def _groupMsg(event: Event):
    if await yeshou(event, bot):
        return
    t = time.time()
    g = None
    
    gr = ginfo.get(event.group_id)
    if not gr:
        await db.addGroup(event.group_id)
        g = await db.getGroup(event.group_id)
        ginfo.update({g[0]:[g, t]})
    elif t - gr[1] > 60:
        g = await db.getGroup(event.group_id)
        ginfo.update({g[0]:[g, t]})
    else:
        g = gr[0]

    if g[8] == 1:
        return
    if g[9]:
        x = json.loads(g[9])
        for i in x:
            if i == event.user_id:
                return

    if re.search(r'([命指口]令)|(说明)', event.message):
        await bot.send(event, "https://nyanyadance.com/", at_sender=True)
        pushcall(time.time())
        return

    if await setu.sendSetu(event, bot, CQparse, g): 
        pushcall(time.time())
        return
    elif await interact.interact(event, bot, CQparse, db, g): 
        pushcall(time.time())
        return
    elif await repeat.repeat(event, bot, CQparse, g): 
        pushcall(time.time())
        return
    else: 
        pushcall(time.time())
        await repeat.randomRepeat(event,bot, g)
    return


@bot.on_notice('group_recall')
async def _antirecall(event: Event):
    g = await db.getGroup(event.group_id)
    if not g:
        await db.addGroup(event.group_id)
        return
    await antirecall.antirecall(event, bot, g)

@bot.on_notice('group_increase.approve', 'group_increase.invite')
async def _welcome(event: Event):
    await bot.send(event, '欢迎新人喵~~', at_sender = True)
    return


#备用接口
@bot.server_app.route('/glist/<usr>', methods=('GET', 'POST'))
async def _grouplist(usr):
    t = False
    user = False
    try:
        user = int(usr)
    except:
        r = bot.server_app.response_class(
            status=404,
            response=str({'msg': '错误'}),
            mimetype='application/json'
        )
        return r

    for a in accounts.keys():
        if a == user:
            if time.time() - accounts[a] < 10000:
                t = True

    if t:
        try:
            w = await bot.get_group_list(self_id=user)
            r = bot.server_app.response_class(
                status=200,
                response=bot.server_app.json_encoder().encode(w),
                mimetype='application/json'
            )
            return r
        except:
            r = bot.server_app.response_class(
                status=404,
                response=str({'msg': '错误'}),
                mimetype='application/json'
            )
            return r
        
        
    else:
        r = bot.server_app.response_class(
            status=404,
            response=str({'msg': '错误'}),
            mimetype='application/json'
        )
        return r

@bot.server_app.route('/freq', methods=('GET', 'POST'))
async def _freq():
    if len(call) < 2:
        r = bot.server_app.response_class(
            status=200,
            response=str(0),
            mimetype='application/json'
        )
        return r
    else:
        r = bot.server_app.response_class(
            status=200,
            response=str(len(call) / (time.time() - call[0]) * 60),
            mimetype='application/json'
        )
        return r


@bot.server_app.route('/book/<book>', methods=('GET', 'POST'))
async def _book(book):
    b = False
    try:
        b = int(book)
    except:
        r = bot.server_app.response_class(
            status=404,
            response=str({'msg': '错误'}),
            mimetype='application/json'
        )
        return r

    res = await blb.getNovel(b)

    if not res['success']:
        r = bot.server_app.response_class(
            status=404,
            response=str({'msg': '错误'}),
            mimetype='application/json'
        )
        return r
    else:
        try:
            r = bot.server_app.response_class(
                status=200,
                response=bot.server_app.json_encoder().encode([res['title'],res['chapter']]),
                mimetype='application/json'
            )
            return r
        except:
            r = bot.server_app.response_class(
                status=404,
                response=str({'msg': '错误'}),
                mimetype='application/json'
            )
            return r

@bot.server_app.route('/biliup/<uid>', methods=('GET', 'POST'))
async def _biliup(uid):
    b = False
    try:
        b = int(uid)
    except:
        r = bot.server_app.response_class(
            status=404,
            response=str({'msg': '错误'}),
            mimetype='application/json'
        )
        return r

    res = await bili.getUp(b)

    if not res['success']:
        r = bot.server_app.response_class(
            status=404,
            response=str({'msg': '错误'}),
            mimetype='application/json'
        )
        return r
    else:
        try:
            r = bot.server_app.response_class(
                status=200,
                response=bot.server_app.json_encoder().encode([res['name'],res['did']]),
                mimetype='application/json'
            )
            return r
        except:
            r = bot.server_app.response_class(
                status=404,
                response=str({'msg': '错误'}),
                mimetype='application/json'
            )
            return r

bot.run(host=config.host_ip, port=config.host_port)
